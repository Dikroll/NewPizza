services:
  db:
    image: postgres:17-alpine
    container_name: postgres_db
    restart: always
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_LOCAL_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - private_django
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
    entrypoint: /entrypoint.sh
    command: bash -c "gunicorn backend.wsgi:application --bind 0.0.0.0:${DJANGO_PORT}"
    working_dir: /app/backend
    restart: on-failure
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "${DJANGO_PORT}:${DJANGO_PORT}"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_URL=redis://redis:${REDIS_PORT}/1
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT}/0
      - PYTHONUNBUFFERED=1
    container_name: backend
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - private_django
      - public_network

  web:
    build:
      context: ./web
    command: sh -c "yarn install && yarn dev"
    volumes:
      - ./web:/app
      - web_node_modules:/app/node_modules
    ports:
      - "${NEXT_PORT}:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://backend:${DJANGO_PORT}/api
    depends_on:
      - backend
    networks:
      - public_network

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - private_django

  nginx:
    container_name: core_web
    image: nginx:stable-alpine
    restart: on-failure
    ports:
      - "${NGINX_PORT}:{NGINX_INTERNAL_PORT}"
      - "${NGINX_LOCAL_PORT}:{NGINX_INTERNAL2_PORT}"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/staticfiles
      - media_volume:/app/media
    networks:
      - private_django
      - public_network

  celery:
    build:
      context: ./backend
    command: celery -A backend worker -l info
    container_name: celery_worker
    volumes:
      - ./backend:/app
      - poetry_cache:/root/.cache/pypoetry
    depends_on:
      - backend
      - redis
    networks:
      - private_django

volumes:
  postgres_data:
  media_volume:
  static_volume:
  web_node_modules:
  poetry_cache:
  redis_data:

networks:
  public_network:
    driver: bridge
  private_django:
    internal: true
